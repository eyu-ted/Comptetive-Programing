class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        parent = list(range(len(graph)))
        size = [1] * len(graph)

        def find(x):
            if parent[x] != x:
                parent[x] = find(parent[x])
            return parent[x]

        def union(x, y):
            rootX = find(x)
            rootY = find(y)
            
            if rootX != rootY:
                if size[rootX] > size[rootY]:
                    parent[rootY] = rootX
                    size[rootX] += size[rootY]
                else:
                    parent[rootX] = rootY
                    size[rootY] += size[rootX]


        for i in range(len(graph)):
            for j in range(len(graph[0])):
                if i != j and graph[i][j] == 1:
                    union(i, j)
        
       
        dic = defaultdict(int)
        for node in initial:
            root = find(node)
            dic[root] += 1
        
    
        minn = -1
        ans = min(initial)
        
        for node in initial:
            root = find(node)
            if dic[root] == 1: 
                if size[root] > minn:
                    minn = size[root]
                    ans = node
                elif size[root] == minn:
                    ans = min(ans, node)
        
        return ans
